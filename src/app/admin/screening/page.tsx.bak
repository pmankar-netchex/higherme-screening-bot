'use client';

import { Suspense } from 'react';
import ScreeningContent from './screening-content';

export default function ScreeningConfigPage() {
  return (
    <Suspense fallback={<div className="p-4 text-center">Loading configuration...</div>}>
      <ScreeningContent />
    </Suspense>
  );
  
  // State for active tab
  const [activeTab, setActiveTab] = useState<TabType>(
    tabParam === 'voice' ? 'voice' : 
    tabParam === 'prompts' ? 'prompts' : 
    tabParam === 'evaluation' ? 'evaluation' : 
    tabParam === 'rolemanagement' ? 'rolemanagement' : 'roles'
  );
  
  // State for screening configuration
  const [config, setConfig] = useState<{
    roles: {
      [key: string]: RoleConfig;
    };
    mandatoryQuestions: string[];
    vapiSettings: VapiConfig;
  } | null>(null);
  
  const [newRoleName, setNewRoleName] = useState('');
  const [activeRole, setActiveRole] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [roleToDelete, setRoleToDelete] = useState('');
  const [showAddRoleModal, setShowAddRoleModal] = useState(false);
  
  // Load config on mount
  useEffect(() => {
    loadConfig();
  }, []);
  
  // Load configuration from server
  const loadConfig = async () => {
    setIsLoading(true);
    try {
      // Make API call to get the configuration
      const response = await fetch('/api/admin/screening');
      if (!response.ok) {
        throw new Error('Failed to fetch configuration');
      }
      const loadedConfig = await response.json();
      
      setConfig({
        roles: loadedConfig.roles,
        mandatoryQuestions: loadedConfig.mandatoryQuestions,
        vapiSettings: loadedConfig.vapiSettings
      });
      
      // Set first role as active if none is selected
      if (!activeRole && Object.keys(loadedConfig.roles).length > 0) {
        setActiveRole(Object.keys(loadedConfig.roles)[0]);
      }
    } catch (error) {
      console.error('Failed to load screening configuration:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle role config update
  const handleUpdateRole = async (roleType: ScreeningRole, updatedConfig: RoleConfig) => {
    if (!config) return;
    
    try {
      // Update local state first for immediate feedback
      setConfig({
        ...config,
        roles: {
          ...config.roles,
          [roleType]: updatedConfig
        }
      });
      
      // Update on server via API
      const response = await fetch('/api/admin/screening', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roleType,
          roleConfig: updatedConfig
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update role configuration');
      }
      
      setIsEditing(false);
    } catch (error) {
      console.error(`Failed to update ${roleType} configuration:`, error);
      // Revert local state on error
      loadConfig();
    }
  };
  
  // Handle mandatory questions update
  const handleUpdateMandatory = async (questions: string[]) => {
    if (!config) return;
    
    try {
      // Update local state first for immediate feedback
      setConfig({
        ...config,
        mandatoryQuestions: questions
      });
      
      // Update on server via API
      const response = await fetch('/api/admin/screening', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mandatoryQuestions: questions
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update mandatory questions');
      }
    } catch (error) {
      console.error('Failed to update mandatory questions:', error);
      // Revert local state on error
      loadConfig();
    }
  };
  
  // Handle voice settings update
  const handleUpdateVoiceSettings = async (vapiSettings: Partial<VapiConfig>) => {
    if (!config) return;
    
    try {
      // Update local state first for immediate feedback by merging with existing settings
      const updatedSettings = {
        ...config.vapiSettings,
        ...vapiSettings
      };
      
      setConfig({
        ...config,
        vapiSettings: updatedSettings
      });
      
      // Update on server via API
      const response = await fetch('/api/admin/screening', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ vapiSettings: updatedSettings }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to update voice settings');
      }
    } catch (error) {
      console.error('Failed to update voice settings:', error);
      // Revert local state on error
      loadConfig();
    }
  };
  
  // Handle adding new role
  const handleAddRole = async () => {
    if (!config || !newRoleName.trim()) return;
    
    const roleKey = newRoleName.trim().toLowerCase().replace(/\s+/g, '_');
    
    // Check if role already exists
    if (config.roles[roleKey]) {
      alert('A role with this name already exists.');
      return;
    }
    
    // Create default role config
    const newRoleConfig: RoleConfig = {
      name: newRoleName.trim(),
      department: 'General',
      screeningQuestions: [
        'What experience do you have relevant to this position?',
        'How do you handle high-pressure situations?',
        'What are your strengths in a team environment?'
      ],
      evaluationCriteria: {
        experience: {
          weight: 0.4,
          description: 'Relevant experience for the role'
        },
        availability: {
          weight: 0.3,
          description: 'Schedule flexibility'
        },
        softSkills: {
          weight: 0.3,
          description: 'Communication and teamwork skills'
        }
      }
    };
    
    try {
      // Add to server via API
      const response = await fetch('/api/admin/screening', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roleType: roleKey,
          roleConfig: newRoleConfig
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to add new role');
      }
      
      // Update local state
      setConfig({
        ...config,
        roles: {
          ...config.roles,
          [roleKey]: newRoleConfig
        }
      });
      
      // Set as active role and reset form
      setActiveRole(roleKey);
      setNewRoleName('');
      setShowAddRoleModal(false);
    } catch (error) {
      console.error('Failed to add new role:', error);
    }  };

  // Handle role deletion
  const handleDeleteRole = async () => {
    if (!config || !roleToDelete || !config.roles[roleToDelete]) {
      setShowDeleteModal(false);
      return;
    }
    
    try {
      // Delete on server via API
      const response = await fetch('/api/admin/screening', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roleType: roleToDelete
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete role');
      }
      
      // Update local state
      const updatedRoles = { ...config.roles };
      delete updatedRoles[roleToDelete];
      
      setConfig({
        ...config,
        roles: updatedRoles
      });
      
      // If the active role was deleted, set another as active
      if (activeRole === roleToDelete) {
        const remainingRoles = Object.keys(updatedRoles);
        setActiveRole(remainingRoles.length > 0 ? remainingRoles[0] : '');
      }
      
      setShowDeleteModal(false);
      setRoleToDelete('');
    } catch (error) {
      console.error('Failed to delete role:', error);
    }
  };
  
  // Handle showing the delete confirmation
  const confirmDeleteRole = (roleKey: string) => {
    setRoleToDelete(roleKey);
    setShowDeleteModal(true);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <Link href="/admin" className="text-blue-600 hover:text-blue-800 mb-4 inline-block">
            ‚Üê Back to Admin Panel
          </Link>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Screening Configuration
          </h1>
          <p className="text-gray-600">
            Configure screening questions, evaluation criteria, and voice settings.
          </p>
        </div>

        {/* Tabs */}
        <div className="mb-6 border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('roles')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'roles'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Role-Based Questions
            </button>
            <button
              onClick={() => setActiveTab('voice')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'voice'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Voice AI Settings
            </button>
            <button
              onClick={() => setActiveTab('prompts')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'prompts'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              AI Prompt Customization
            </button>
            <button
              onClick={() => setActiveTab('evaluation')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'evaluation'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Evaluation Criteria
            </button>
            <button
              onClick={() => setActiveTab('rolemanagement')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'rolemanagement'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Role Management
            </button>
          </nav>
        </div>
        
        {isLoading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            <p className="mt-3 text-gray-600">Loading configuration...</p>
          </div>
        ) : config ? (
          <>
            {/* Role-Based Questions Tab */}
            {activeTab === 'roles' && (
              <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
                {/* Sidebar with role selection */}
                <div className="lg:col-span-1">
                  <div className="bg-white rounded-lg shadow-md p-4">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="text-lg font-medium text-gray-900">Role Types</h3>
                      <button 
                        onClick={() => setShowAddRoleModal(true)}
                        className="p-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200"
                        title="Add new role"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                      </button>
                    </div>
                    
                    <div className="space-y-1">
                      {Object.entries(config.roles).map(([roleKey, roleData]) => (
                        <div key={roleKey} className="flex items-center justify-between">
                          <button
                            onClick={() => setActiveRole(roleKey)}
                            className={`block w-full text-left px-3 py-2 rounded-md ${
                              activeRole === roleKey 
                                ? 'bg-blue-50 text-blue-700 font-medium' 
                                : 'text-gray-700 hover:bg-gray-100'
                            }`}
                          >
                            {roleData.name}
                          </button>
                          <button
                            onClick={() => confirmDeleteRole(roleKey)}
                            className="p-1 text-gray-400 hover:text-red-500"
                            title={`Delete ${roleData.name} role`}
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
                
                {/* Main content area with ScreeningConfig component */}
                <div className="lg:col-span-3">
                  {activeRole && config.roles[activeRole] ? (
                    <ScreeningConfigSimple
                      roleType={activeRole as ScreeningRole}
                      roleConfig={config.roles[activeRole]}
                      mandatoryQuestions={config.mandatoryQuestions}
                      onUpdate={handleUpdateRole}
                      onUpdateMandatory={handleUpdateMandatory}
                    />
                  ) : (
                    <div className="bg-white rounded-lg shadow-md p-6 text-center">
                      <svg className="w-12 h-12 text-gray-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                      <h3 className="mt-2 text-sm font-medium text-gray-900">No role selected</h3>
                      <p className="mt-1 text-sm text-gray-500">
                        Select a role from the sidebar to configure its screening questions and evaluation criteria.
                      </p>
                      <div className="mt-6">
                        <button
                          onClick={() => setShowAddRoleModal(true)}
                          className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                          <svg className="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                          </svg>
                          Add New Role
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {/* Voice AI Settings Tab */}
            {activeTab === 'voice' && config.vapiSettings && (
              <VoiceSettings 
                vapiSettings={config.vapiSettings} 
                onUpdate={handleUpdateVoiceSettings} 
              />
            )}
            
            {/* AI Prompt Customization Tab */}
            {activeTab === 'prompts' && config.vapiSettings && (
              <PromptCustomization 
                vapiSettings={config.vapiSettings} 
                onUpdate={handleUpdateVoiceSettings} 
              />
            )}
            
            {/* Evaluation Criteria Tab */}
            {activeTab === 'evaluation' && config.roles && (
              <EvaluationCriteriaConfig 
                roles={config.roles} 
                onUpdate={handleUpdateRole} 
              />
            )}

            {/* Role Management Tab */}
            {activeTab === 'rolemanagement' && config.roles && (
              <RoleTypeManagement 
                roles={config.roles} 
                onUpdate={(updatedRoles) => {
                  setConfig({
                    ...config,
                    roles: updatedRoles
                  });
                }} 
              />
            )}
          </>
        ) : (
          <div className="text-center py-12">
            <p className="text-red-500">Failed to load configuration. Please refresh the page.</p>
          </div>
        )}
        
        {/* Delete Confirmation Modal */}
        {showDeleteModal && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Confirm Deletion</h3>
              <p className="text-gray-500 mb-6">
                Are you sure you want to delete the "{config?.roles[roleToDelete]?.name}" role? This action cannot be undone.
              </p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowDeleteModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDeleteRole}
                  className="px-4 py-2 border border-transparent rounded-md text-white bg-red-600 hover:bg-red-700"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* Add Role Modal */}
        {showAddRoleModal && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Add New Role</h3>
              <div className="mb-4">
                <label htmlFor="newRoleName" className="block text-sm font-medium text-gray-700 mb-1">
                  Role Name
                </label>
                <input
                  type="text"
                  id="newRoleName"
                  value={newRoleName}
                  onChange={(e) => setNewRoleName(e.target.value)}
                  placeholder="e.g., Bartender, Dishwasher"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
                <p className="mt-1 text-xs text-gray-500">
                  This will create a new role with default screening questions and evaluation criteria.
                </p>
              </div>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowAddRoleModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddRole}
                  disabled={!newRoleName.trim()}
                  className={`px-4 py-2 border border-transparent rounded-md text-white ${
                    newRoleName.trim() ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-300 cursor-not-allowed'
                  }`}
                >
                  Add Role
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// Export the default page component wrapped in Suspense
export default function ScreeningConfigPage() {
  return (
    <Suspense fallback={<div className="p-4 text-center">Loading configuration...</div>}>
      <ScreeningConfigContent />
    </Suspense>
  );
}
