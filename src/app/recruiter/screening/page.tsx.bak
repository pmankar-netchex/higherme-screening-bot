'use client';

import { useState, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { ScreeningCall, Candidate, Job, ScreeningSummary } from '@/lib/types';

interface ScreeningPageData {
  screenings: ScreeningCall[];
  candidates: Candidate[];
  jobs: Job[];
}

// Content component that uses search params
function RecruiterScreeningPageContent() {
  const [data, setData] = useState<ScreeningPageData>({ screenings: [], candidates: [], jobs: [] });
  const [loading, setLoading] = useState(true);
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const searchParams = useSearchParams();
  const candidateId = searchParams.get('candidateId');

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // Build query params
        const params = new URLSearchParams();
        if (candidateId) params.append('candidateId', candidateId);
        if (selectedStatus !== 'all') params.append('status', selectedStatus);

        const [screeningsRes, candidatesRes, jobsRes] = await Promise.all([
          fetch(`/api/screening?${params.toString()}`),
          fetch('/api/candidates'),
          fetch('/api/jobs')
        ]);

        if (!screeningsRes.ok || !candidatesRes.ok || !jobsRes.ok) {
          throw new Error('Failed to fetch data');
        }

        const [screenings, candidates, jobs] = await Promise.all([
          screeningsRes.json(),
          candidatesRes.json(),
          jobsRes.json()
        ]);

        setData({ screenings, candidates, jobs });
      } catch (error) {
        console.error('Error fetching screening data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [candidateId, selectedStatus]);

  const getCandidateName = (candidateId: string) => {
    const candidate = data.candidates.find(c => c.id === candidateId);
    return candidate ? `${candidate.firstName} ${candidate.lastName}` : 'Unknown Candidate';
  };

  const getJobTitle = (jobId: string) => {
    const job = data.jobs.find(j => j.id === jobId);
    return job ? job.title : 'Unknown Job';
  };

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'scheduled': return 'bg-yellow-100 text-yellow-800';
      case 'in_progress': return 'bg-blue-100 text-blue-800';
      case 'completed': return 'bg-green-100 text-green-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatDuration = (seconds?: number) => {
    if (!seconds) return 'N/A';
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const renderSummaryPreview = (summary?: ScreeningSummary) => {
    if (!summary) return <span className="text-gray-500">No summary available</span>;
    
    return (
      <div className="text-sm">
        <div className="mb-2">
          <span className="font-medium">Experience:</span> {summary.experience.evaluation.substring(0, 100)}...
        </div>
        <div className="flex flex-wrap gap-2 mb-2">
          <span className={`px-2 py-1 rounded text-xs ${summary.availability.morning ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
            Morning: {summary.availability.morning ? 'Available' : 'Not Available'}
          </span>
          <span className={`px-2 py-1 rounded text-xs ${summary.availability.evening ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
            Evening: {summary.availability.evening ? 'Available' : 'Not Available'}
          </span>
          <span className={`px-2 py-1 rounded text-xs ${summary.availability.weekends ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
            Weekends: {summary.availability.weekends ? 'Available' : 'Not Available'}
          </span>
        </div>
        {summary.roleSpecific.strengths.length > 0 && (
          <div>
            <span className="font-medium">Strengths:</span> {summary.roleSpecific.strengths.join(', ')}
          </div>
        )}
      </div>
    );
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2">Loading screening data...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Screening Calls</h1>
          <p className="text-gray-600 mt-1">
            {candidateId ? `Screenings for ${getCandidateName(candidateId)}` : 'All screening calls'}
          </p>
        </div>
        <Link
          href="/recruiter"
          className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Dashboard
        </Link>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow mb-6 p-4">
        <div className="flex items-center space-x-4">
          <label className="text-sm font-medium text-gray-700">Filter by status:</label>
          <select
            value={selectedStatus}
            onChange={(e) => setSelectedStatus(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">All Statuses</option>
            <option value="scheduled">Scheduled</option>
            <option value="in_progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="failed">Failed</option>
          </select>
        </div>
      </div>

      {/* Screening List */}
      <div className="bg-white rounded-lg shadow">
        {data.screenings.length === 0 ? (
          <div className="p-6 text-center">
            <div className="text-gray-500 mb-2">No screening calls found</div>
            <p className="text-sm text-gray-400">
              {candidateId ? 'This candidate has no screening calls yet.' : 'No screening calls match your current filters.'}
            </p>
          </div>
        ) : (
          <div className="divide-y divide-gray-200">
            {data.screenings.map((screening) => (
              <div key={screening.id} className="p-6 hover:bg-gray-50">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h3 className="text-lg font-medium text-gray-900">
                        {getCandidateName(screening.candidateId)}
                      </h3>
                      <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeColor(screening.status)}`}>
                        {screening.status.replace('_', ' ')}
                      </span>
                    </div>
                    
                    <div className="text-sm text-gray-600 mb-3">
                      <span className="font-medium">Position:</span> {getJobTitle(screening.jobId)}
                      <span className="mx-2">•</span>
                      <span className="font-medium">Scheduled:</span> {new Date(screening.scheduledAt).toLocaleString()}
                      {screening.duration && (
                        <>
                          <span className="mx-2">•</span>
                          <span className="font-medium">Duration:</span> {formatDuration(screening.duration)}
                        </>
                      )}
                    </div>

                    {screening.summary && (
                      <div className="bg-gray-50 rounded-lg p-4 mb-3">
                        <h4 className="font-medium text-gray-900 mb-2">Screening Summary</h4>
                        {renderSummaryPreview(screening.summary)}
                      </div>
                    )}

                    {screening.errorMessage && (
                      <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-3">
                        <div className="flex items-center">
                          <svg className="w-4 h-4 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <span className="text-sm text-red-700">Error: {screening.errorMessage}</span>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="flex items-center space-x-2 ml-4">
                    {screening.transcript && (
                      <button
                        onClick={() => window.open(`data:text/plain;charset=utf-8,${encodeURIComponent(screening.transcript!)}`, '_blank')}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                        title="View Transcript"
                      >
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Transcript
                      </button>
                    )}
                    
                    {screening.audioUrl && (
                      <button
                        onClick={() => window.open(screening.audioUrl, '_blank')}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                        title="Play Audio"
                      >
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15a2 2 0 002-2V9a2 2 0 00-2-2h-1.586a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 4H8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        Audio
                      </button>
                    )}

                    <Link
                      href={`/recruiter/candidate/${screening.candidateId}`}
                      className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                    >
                      View Candidate
                    </Link>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

// Export the page component wrapped in Suspense
export default function RecruiterScreeningPage() {
  return (
    <Suspense fallback={<div className="p-4 text-center">Loading screening data...</div>}>
      <RecruiterScreeningPageContent />
    </Suspense>
  );
}
